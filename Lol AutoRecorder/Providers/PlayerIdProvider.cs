using Lol_AutoRecorder.Constants;
using Lol_AutoRecorder.Enums;
using Lol_AutoRecorder.Exceptions;
using Lol_AutoRecorder.Interfaces;
using Lol_AutoRecorder.Wrappers;
using Ninject.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;

namespace Lol_AutoRecorder.Providers
{
    /// <summary>
    /// This class reads r3dlog files generated by LoL client to fetch the id's needed to focus on a player.
    /// If one day ReplayAPI will give us a chance to focus camera on a player, it won't be needed
    /// </summary>
    public class PlayerIdProvider : IPlayerIdProvider
    {
        private const string TeamOrder = "TeamOrder";
        private const string TeamChaos = "TeamChaos";
        private const string LogsBasePath = @"Logs/GameLogs";
        private const string LogPattern = "*r3dlog.txt";
        private const string PlayerIdOrderPattern = "(?<=TeamOrder )\\d";
        private const string PlayerIdChaosePattern = "(?<=TeamChaos )\\d";

        private readonly IInputOutputWrapper _inputOutputWrapper;
        private readonly ILogger _logger;

        public PlayerIdProvider(IInputOutputWrapper inputOutputWrapper, ILogger logger)
        {
            _inputOutputWrapper = inputOutputWrapper ?? throw new ArgumentNullException(nameof(inputOutputWrapper));
            _logger = logger ?? throw new ArgumentNullException(nameof(logger));
        }

        public PlayerIdProviderResult Provide(string leagueFolderPath, string championName)
        {
            if (string.IsNullOrEmpty(leagueFolderPath)) throw new PlayerIdProviderException($"Argument: {leagueFolderPath} not specified.");
            if (string.IsNullOrEmpty(championName)) throw new PlayerIdProviderException($"Argument: {championName} not specified.");

            try
            {
                _logger.Debug("Mapping champion name to playerId.");
                if (string.IsNullOrEmpty(leagueFolderPath)) throw new ArgumentNullException(nameof(leagueFolderPath));

                var logPath = _inputOutputWrapper.GetFullPath(Path.Combine(leagueFolderPath, LogsBasePath));
                string date = DateTime.Now.ToString("yyyy-MM-dd");
                DirectoryInfo currentDirectory = _inputOutputWrapper.GetDirectoryInfo(logPath, $"{date}*");
                string r3dlog = _inputOutputWrapper.GetFile(currentDirectory.FullName, LogPattern);
                _logger.Debug($"Log path: {r3dlog}");

                var playersInfo = _inputOutputWrapper.GetLinesContainingMatchingWords(r3dlog, new List<string> { TeamOrder, TeamChaos });
                var playerInfo = playersInfo.FirstOrDefault(line => line.Contains(championName));
                if (playerInfo == null) throw new ArgumentNullException($"Champion: {championName} not found in r3dlog.txt file");

                string playerIdRegex = PlayerIdOrderPattern;
                var playerIdMatch = Regex.Match(playerInfo, playerIdRegex);
                if (playerIdMatch.Success)
                {
                    _logger.Debug($"Player Id: {playerIdMatch.Value}, Team: Order");
                    return new PlayerIdProviderResult
                    {
                        Id = playerIdMatch.Value,
                        Team = TeamChaosOrder.Order
                    };
                }

                playerIdRegex = PlayerIdChaosePattern;
                playerIdMatch = Regex.Match(playerInfo, playerIdRegex);
                if (playerIdMatch.Success)
                {
                    _logger.Debug($"Player Id: {playerIdMatch.Value}, Team: Chaos");
                    return new PlayerIdProviderResult
                    {
                        Id = playerIdMatch.Value,
                        Team = TeamChaosOrder.Chaos
                    };
                }
            }
            catch (Exception exception)
            {
                throw new PlayerIdProviderException(Error.PlayerIdNotFoundError, exception);
            }

            throw new InvalidDataException(Error.PlayerIdNotFoundError);
        }
    }
}
